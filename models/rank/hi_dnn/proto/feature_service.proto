// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
import "user_info.proto";
import "item_info.proto";
import "rank.proto";
import "recall.proto";
package feature_service;
option cc_generic_services = false;

message FeatureRequest {
    enum Type {
        RANK = 0;
        RECALL = 1;
    };
    Type type = 1;
    rank_server.RankRequest rank_request=2;
    recall_server.RecallRequest recall_request=3; 
};

message FSRank {
    message Error {
        // HTTP状态码
        uint32 code = 1;
        /*
        BAD_REQUEST = 400;  // 非法参数
        UNAUTHORIZED = 401; // 未授权
        QUOTA_EXCEED = 402; // 配额超限
        INTERNAL_SERVER_ERROR = 500; // 内部错误
        */
        string text = 2;
    };
    // 新的状态码
    enum Status {
        SUCCESS = 0; //有value的情况
        VALUE_NOT_EXIST = 1; //没有value，但查询都正常的情况
        IDM_FAIL = 2; //idm失败的情况
        INTERIOR_FAIL = 3; //内部查询失败的情况（ufs失败）
        PLUGIN_EXEC_FAIL = 4;
    };
    Error error = 1;
    user_info.UserInfo user_info=2;
    repeated item_info.ItemInfo item_content=3;
};

message FSRecall {
    message Error {
        // HTTP状态码
        uint32 code = 1;
        /*
        BAD_REQUEST = 400;  // 非法参数
        UNAUTHORIZED = 401; // 未授权
        QUOTA_EXCEED = 402; // 配额超限
        INTERNAL_SERVER_ERROR = 500; // 内部错误
        */
        string text = 2;
    };
    Error error =1;
    user_info.UserInfo user_info=2;
    repeated string nid = 3;
};

message FeatureResponse {
    enum Type {
        RANK=0;
        RECALL=1;
    };
    Type type = 1;
    FSRank rank_feature=2;
    FSRecall recall_feature=3;
};

service FeatureService {
   rpc get_feature(FeatureRequest) returns (FeatureResponse);
};
